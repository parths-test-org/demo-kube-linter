name: Scan with kube-linter

on:
  # Note that both `push` and `pull_request` triggers should be present for GitHub to consistently present kube-linter
  # SARIF reports.
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  scan:
  # Run tests only if this a push the default branch, or if the pr has a label "ready-to-test"
    if: ${{ github.ref == 'refs/heads/master' || contains(github.event.issue.labels.*.name, 'ready-to-test') }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    env:
        DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
    steps:
      - uses: actions/checkout@v3
        with:
            ref: ${{ github.event.pull_request.head.sha }}

      - name: Scan files with kube-linter
        uses: stackrox/kube-linter-action@v1.0.4
        id: kube-linter-action-scan
        with:
          # Adjust this directory to the location where your kubernetes resources and helm charts are located.
          directory: .
          # Adjust this to the location of kube-linter config you're using, or remove the setting if you'd like to use
          # the default config.
          # config: sample/.kube-linter-config.yaml
          # The following two settings make kube-linter produce scan analysis in SARIF format
          format: sarif
          output-file: ./kube-linter.sarif
        # The following line prevents aborting the workflow immediately in case your files fail kube-linter checks.
        # This allows the following upload-sarif action to still upload the results.
        continue-on-error: true

      - name: Upload SARIF report files to DeepSource
        run: |
          # Download the DeepSource CLI, based on the OS
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # make a directory `bin` in the current directory
            mkdir bin
            Invoke-WebRequest -Uri https://deepsource.io/cli -OutFile bin/deepsource
            # make the downloaded file executable
            Set-ItemProperty -Path bin/deepsource -Name IsExecutable -Value $true
          else
            curl https://deepsource.io/cli | sh

          fi
          # report the coverage to DeepSource
          ./bin/deepsource report --analyzer kube-linter --analyzer-type community --value-file ./README.md
          
      # Ensure the workflow eventually fails if files did not pass kube-linter checks.
      - name: Verify kube-linter-action succeeded
        shell: bash
        run: |
          echo "If this step fails, kube-linter found issues. Check the output of the scan step above."
          [[ "${{ steps.kube-linter-action-scan.outcome }}" == "success" ]]
